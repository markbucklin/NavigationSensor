// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "./flatbuffers"
/**
 * Feather is an experimental serialization format implemented using
 * techniques from Apache Arrow. It was created as a proof-of-concept of an
 * interoperable file format for storing data frames originating in Python or
 * R. It enabled the developers to sidestep some of the open design questions
 * in Arrow from early 2016 and instead create something simple and useful for
 * the intended use cases.
 *
 * @enum
 */
export namespace arrow.ipc.feather.fbs{
export enum Type{
  BOOL= 0,
  INT8= 1,
  INT16= 2,
  INT32= 3,
  INT64= 4,
  UINT8= 5,
  UINT16= 6,
  UINT32= 7,
  UINT64= 8,
  FLOAT= 9,
  DOUBLE= 10,
  UTF8= 11,
  BINARY= 12,
  CATEGORY= 13,
  TIMESTAMP= 14,
  DATE= 15,
  TIME= 16
}};

/**
 * @enum
 */
export namespace arrow.ipc.feather.fbs{
export enum Encoding{
  PLAIN= 0,

  /**
   * Data is stored dictionary-encoded
   * dictionary size: <INT32 Dictionary size>
   * dictionary data: <TYPE primitive array>
   * dictionary index: <INT32 primitive array>
   *
   * TODO: do we care about storing the index values in a smaller typeclass
   */
  DICTIONARY= 1
}};

/**
 * @enum
 */
export namespace arrow.ipc.feather.fbs{
export enum TimeUnit{
  SECOND= 0,
  MILLISECOND= 1,
  MICROSECOND= 2,
  NANOSECOND= 3
}};

/**
 * @enum
 */
export namespace arrow.ipc.feather.fbs{
export enum TypeMetadata{
  NONE= 0,
  CategoryMetadata= 1,
  TimestampMetadata= 2,
  DateMetadata= 3,
  TimeMetadata= 4
}};

/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class PrimitiveArray {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {PrimitiveArray}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):PrimitiveArray {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {PrimitiveArray=} obj
 * @returns {PrimitiveArray}
 */
static getRootAsPrimitiveArray(bb:flatbuffers.ByteBuffer, obj?:PrimitiveArray):PrimitiveArray {
  return (obj || new PrimitiveArray).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.Type}
 */
type():arrow.ipc.feather.fbs.Type {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.Type} */ (this.bb!.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.Type.BOOL;
};

/**
 * @returns {arrow.ipc.feather.fbs.Encoding}
 */
encoding():arrow.ipc.feather.fbs.Encoding {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? /** @type {arrow.ipc.feather.fbs.Encoding} */ (this.bb!.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.Encoding.PLAIN;
};

/**
 * Relative memory offset of the start of the array data excluding the size
 * of the metadata
 *
 * @returns {flatbuffers.Long}
 */
offset():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * The number of logical values in the array
 *
 * @returns {flatbuffers.Long}
 */
length():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * The number of observed nulls
 *
 * @returns {flatbuffers.Long}
 */
nullCount():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * The total size of the actual data in the file
 *
 * @returns {flatbuffers.Long}
 */
totalBytes():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 14);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startPrimitiveArray(builder:flatbuffers.Builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.Type} type
 */
static addType(builder:flatbuffers.Builder, type:arrow.ipc.feather.fbs.Type) {
  builder.addFieldInt8(0, type, arrow.ipc.feather.fbs.Type.BOOL);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.Encoding} encoding
 */
static addEncoding(builder:flatbuffers.Builder, encoding:arrow.ipc.feather.fbs.Encoding) {
  builder.addFieldInt8(1, encoding, arrow.ipc.feather.fbs.Encoding.PLAIN);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} offset
 */
static addOffset(builder:flatbuffers.Builder, offset:flatbuffers.Long) {
  builder.addFieldInt64(2, offset, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} length
 */
static addLength(builder:flatbuffers.Builder, length:flatbuffers.Long) {
  builder.addFieldInt64(3, length, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} nullCount
 */
static addNullCount(builder:flatbuffers.Builder, nullCount:flatbuffers.Long) {
  builder.addFieldInt64(4, nullCount, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} totalBytes
 */
static addTotalBytes(builder:flatbuffers.Builder, totalBytes:flatbuffers.Long) {
  builder.addFieldInt64(5, totalBytes, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endPrimitiveArray(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class CategoryMetadata {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CategoryMetadata}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CategoryMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CategoryMetadata=} obj
 * @returns {CategoryMetadata}
 */
static getRootAsCategoryMetadata(bb:flatbuffers.ByteBuffer, obj?:CategoryMetadata):CategoryMetadata {
  return (obj || new CategoryMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The category codes are presumed to be integers that are valid indexes into
 * the levels array
 *
 * @param {arrow.ipc.feather.fbs.PrimitiveArray=} obj
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray|null}
 */
levels(obj?:arrow.ipc.feather.fbs.PrimitiveArray):arrow.ipc.feather.fbs.PrimitiveArray|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? (obj || new arrow.ipc.feather.fbs.PrimitiveArray).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns {boolean}
 */
ordered():boolean {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? !!this.bb!.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startCategoryMetadata(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} levelsOffset
 */
static addLevels(builder:flatbuffers.Builder, levelsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, levelsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} ordered
 */
static addOrdered(builder:flatbuffers.Builder, ordered:boolean) {
  builder.addFieldInt8(1, +ordered, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endCategoryMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class TimestampMetadata {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {TimestampMetadata}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TimestampMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {TimestampMetadata=} obj
 * @returns {TimestampMetadata}
 */
static getRootAsTimestampMetadata(bb:flatbuffers.ByteBuffer, obj?:TimestampMetadata):TimestampMetadata {
  return (obj || new TimestampMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.TimeUnit}
 */
unit():arrow.ipc.feather.fbs.TimeUnit {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.TimeUnit} */ (this.bb!.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TimeUnit.SECOND;
};

/**
 * Timestamp data is assumed to be UTC, but the time zone is stored here for
 * presentation as localized
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
timezone():string|null
timezone(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
timezone(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startTimestampMetadata(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TimeUnit} unit
 */
static addUnit(builder:flatbuffers.Builder, unit:arrow.ipc.feather.fbs.TimeUnit) {
  builder.addFieldInt8(0, unit, arrow.ipc.feather.fbs.TimeUnit.SECOND);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timezoneOffset
 */
static addTimezone(builder:flatbuffers.Builder, timezoneOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, timezoneOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endTimestampMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class DateMetadata {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {DateMetadata}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):DateMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {DateMetadata=} obj
 * @returns {DateMetadata}
 */
static getRootAsDateMetadata(bb:flatbuffers.ByteBuffer, obj?:DateMetadata):DateMetadata {
  return (obj || new DateMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startDateMetadata(builder:flatbuffers.Builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endDateMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class TimeMetadata {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {TimeMetadata}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TimeMetadata {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {TimeMetadata=} obj
 * @returns {TimeMetadata}
 */
static getRootAsTimeMetadata(bb:flatbuffers.ByteBuffer, obj?:TimeMetadata):TimeMetadata {
  return (obj || new TimeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.TimeUnit}
 */
unit():arrow.ipc.feather.fbs.TimeUnit {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.TimeUnit} */ (this.bb!.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TimeUnit.SECOND;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startTimeMetadata(builder:flatbuffers.Builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TimeUnit} unit
 */
static addUnit(builder:flatbuffers.Builder, unit:arrow.ipc.feather.fbs.TimeUnit) {
  builder.addFieldInt8(0, unit, arrow.ipc.feather.fbs.TimeUnit.SECOND);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endTimeMetadata(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class Column {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Column}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Column {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Column=} obj
 * @returns {Column}
 */
static getRootAsColumn(bb:flatbuffers.ByteBuffer, obj?:Column):Column {
  return (obj || new Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {arrow.ipc.feather.fbs.PrimitiveArray=} obj
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray|null}
 */
values(obj?:arrow.ipc.feather.fbs.PrimitiveArray):arrow.ipc.feather.fbs.PrimitiveArray|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? (obj || new arrow.ipc.feather.fbs.PrimitiveArray).__init(this.bb!.__indirect(this.bb_pos + offset), this.bb!) : null;
};

/**
 * @returns {arrow.ipc.feather.fbs.TypeMetadata}
 */
metadataType():arrow.ipc.feather.fbs.TypeMetadata {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? /** @type {arrow.ipc.feather.fbs.TypeMetadata} */ (this.bb!.readUint8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TypeMetadata.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
metadata<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * This should (probably) be JSON
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
userMetadata():string|null
userMetadata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
userMetadata(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startColumn(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valuesOffset
 */
static addValues(builder:flatbuffers.Builder, valuesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, valuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TypeMetadata} metadataType
 */
static addMetadataType(builder:flatbuffers.Builder, metadataType:arrow.ipc.feather.fbs.TypeMetadata) {
  builder.addFieldInt8(2, metadataType, arrow.ipc.feather.fbs.TypeMetadata.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metadataOffset
 */
static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, metadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} userMetadataOffset
 */
static addUserMetadata(builder:flatbuffers.Builder, userMetadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, userMetadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endColumn(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace arrow.ipc.feather.fbs{
export class CTable {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {CTable}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):CTable {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {CTable=} obj
 * @returns {CTable}
 */
static getRootAsCTable(bb:flatbuffers.ByteBuffer, obj?:CTable):CTable {
  return (obj || new CTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Some text (or a name) metadata about what the file is, optional
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
description():string|null
description(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
description(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
numRows():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * @param {number} index
 * @param {arrow.ipc.feather.fbs.Column=} obj
 * @returns {arrow.ipc.feather.fbs.Column}
 */
columns(index: number, obj?:arrow.ipc.feather.fbs.Column):arrow.ipc.feather.fbs.Column|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new arrow.ipc.feather.fbs.Column).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns {number}
 */
columnsLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Version number of the Feather format
 *
 * @returns {number}
 */
version():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt32(this.bb_pos + offset) : 0;
};

/**
 * Table metadata (likely JSON), not yet used
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
metadata():string|null
metadata(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
metadata(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startCTable(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} descriptionOffset
 */
static addDescription(builder:flatbuffers.Builder, descriptionOffset:flatbuffers.Offset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} numRows
 */
static addNumRows(builder:flatbuffers.Builder, numRows:flatbuffers.Long) {
  builder.addFieldInt64(1, numRows, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnsOffset
 */
static addColumns(builder:flatbuffers.Builder, columnsOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, columnsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
static createColumnsVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
static startColumnsVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} version
 */
static addVersion(builder:flatbuffers.Builder, version:number) {
  builder.addFieldInt32(3, version, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metadataOffset
 */
static addMetadata(builder:flatbuffers.Builder, metadataOffset:flatbuffers.Offset) {
  builder.addFieldOffset(4, metadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endCTable(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
static finishCTableBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

}
}
