// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var arrow = arrow || {};

/**
 * @const
 * @namespace
 */
arrow.ipc = arrow.ipc || {};

/**
 * @const
 * @namespace
 */
arrow.ipc.feather = arrow.ipc.feather || {};

/**
 * @const
 * @namespace
 */
arrow.ipc.feather.fbs = arrow.ipc.feather.fbs || {};

/**
 * Feather is an experimental serialization format implemented using
 * techniques from Apache Arrow. It was created as a proof-of-concept of an
 * interoperable file format for storing data frames originating in Python or
 * R. It enabled the developers to sidestep some of the open design questions
 * in Arrow from early 2016 and instead create something simple and useful for
 * the intended use cases.
 *
 * @enum
 */
arrow.ipc.feather.fbs.Type = {
  BOOL: 0,
  INT8: 1,
  INT16: 2,
  INT32: 3,
  INT64: 4,
  UINT8: 5,
  UINT16: 6,
  UINT32: 7,
  UINT64: 8,
  FLOAT: 9,
  DOUBLE: 10,
  UTF8: 11,
  BINARY: 12,
  CATEGORY: 13,
  TIMESTAMP: 14,
  DATE: 15,
  TIME: 16
};

/**
 * @enum
 */
arrow.ipc.feather.fbs.Encoding = {
  PLAIN: 0,

  /**
   * Data is stored dictionary-encoded
   * dictionary size: <INT32 Dictionary size>
   * dictionary data: <TYPE primitive array>
   * dictionary index: <INT32 primitive array>
   *
   * TODO: do we care about storing the index values in a smaller typeclass
   */
  DICTIONARY: 1
};

/**
 * @enum
 */
arrow.ipc.feather.fbs.TimeUnit = {
  SECOND: 0,
  MILLISECOND: 1,
  MICROSECOND: 2,
  NANOSECOND: 3
};

/**
 * @enum
 */
arrow.ipc.feather.fbs.TypeMetadata = {
  NONE: 0,
  CategoryMetadata: 1,
  TimestampMetadata: 2,
  DateMetadata: 3,
  TimeMetadata: 4
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.PrimitiveArray = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.PrimitiveArray=} obj
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray}
 */
arrow.ipc.feather.fbs.PrimitiveArray.getRootAsPrimitiveArray = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.PrimitiveArray).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.Type}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.type = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.Type} */ (this.bb.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.Type.BOOL;
};

/**
 * @returns {arrow.ipc.feather.fbs.Encoding}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.encoding = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? /** @type {arrow.ipc.feather.fbs.Encoding} */ (this.bb.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.Encoding.PLAIN;
};

/**
 * Relative memory offset of the start of the array data excluding the size
 * of the metadata
 *
 * @returns {flatbuffers.Long}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.offset = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * The number of logical values in the array
 *
 * @returns {flatbuffers.Long}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.length = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * The number of observed nulls
 *
 * @returns {flatbuffers.Long}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.nullCount = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * The total size of the actual data in the file
 *
 * @returns {flatbuffers.Long}
 */
arrow.ipc.feather.fbs.PrimitiveArray.prototype.totalBytes = function() {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.PrimitiveArray.startPrimitiveArray = function(builder) {
  builder.startObject(6);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.Type} type
 */
arrow.ipc.feather.fbs.PrimitiveArray.addType = function(builder, type) {
  builder.addFieldInt8(0, type, arrow.ipc.feather.fbs.Type.BOOL);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.Encoding} encoding
 */
arrow.ipc.feather.fbs.PrimitiveArray.addEncoding = function(builder, encoding) {
  builder.addFieldInt8(1, encoding, arrow.ipc.feather.fbs.Encoding.PLAIN);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} offset
 */
arrow.ipc.feather.fbs.PrimitiveArray.addOffset = function(builder, offset) {
  builder.addFieldInt64(2, offset, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} length
 */
arrow.ipc.feather.fbs.PrimitiveArray.addLength = function(builder, length) {
  builder.addFieldInt64(3, length, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} nullCount
 */
arrow.ipc.feather.fbs.PrimitiveArray.addNullCount = function(builder, nullCount) {
  builder.addFieldInt64(4, nullCount, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} totalBytes
 */
arrow.ipc.feather.fbs.PrimitiveArray.addTotalBytes = function(builder, totalBytes) {
  builder.addFieldInt64(5, totalBytes, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.PrimitiveArray.endPrimitiveArray = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.CategoryMetadata = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.CategoryMetadata}
 */
arrow.ipc.feather.fbs.CategoryMetadata.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.CategoryMetadata=} obj
 * @returns {arrow.ipc.feather.fbs.CategoryMetadata}
 */
arrow.ipc.feather.fbs.CategoryMetadata.getRootAsCategoryMetadata = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.CategoryMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * The category codes are presumed to be integers that are valid indexes into
 * the levels array
 *
 * @param {arrow.ipc.feather.fbs.PrimitiveArray=} obj
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray|null}
 */
arrow.ipc.feather.fbs.CategoryMetadata.prototype.levels = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new arrow.ipc.feather.fbs.PrimitiveArray).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {boolean}
 */
arrow.ipc.feather.fbs.CategoryMetadata.prototype.ordered = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.CategoryMetadata.startCategoryMetadata = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} levelsOffset
 */
arrow.ipc.feather.fbs.CategoryMetadata.addLevels = function(builder, levelsOffset) {
  builder.addFieldOffset(0, levelsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {boolean} ordered
 */
arrow.ipc.feather.fbs.CategoryMetadata.addOrdered = function(builder, ordered) {
  builder.addFieldInt8(1, +ordered, +false);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.CategoryMetadata.endCategoryMetadata = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.TimestampMetadata = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.TimestampMetadata}
 */
arrow.ipc.feather.fbs.TimestampMetadata.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.TimestampMetadata=} obj
 * @returns {arrow.ipc.feather.fbs.TimestampMetadata}
 */
arrow.ipc.feather.fbs.TimestampMetadata.getRootAsTimestampMetadata = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.TimestampMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.TimeUnit}
 */
arrow.ipc.feather.fbs.TimestampMetadata.prototype.unit = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.TimeUnit} */ (this.bb.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TimeUnit.SECOND;
};

/**
 * Timestamp data is assumed to be UTC, but the time zone is stored here for
 * presentation as localized
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
arrow.ipc.feather.fbs.TimestampMetadata.prototype.timezone = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.TimestampMetadata.startTimestampMetadata = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TimeUnit} unit
 */
arrow.ipc.feather.fbs.TimestampMetadata.addUnit = function(builder, unit) {
  builder.addFieldInt8(0, unit, arrow.ipc.feather.fbs.TimeUnit.SECOND);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} timezoneOffset
 */
arrow.ipc.feather.fbs.TimestampMetadata.addTimezone = function(builder, timezoneOffset) {
  builder.addFieldOffset(1, timezoneOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.TimestampMetadata.endTimestampMetadata = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.DateMetadata = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.DateMetadata}
 */
arrow.ipc.feather.fbs.DateMetadata.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.DateMetadata=} obj
 * @returns {arrow.ipc.feather.fbs.DateMetadata}
 */
arrow.ipc.feather.fbs.DateMetadata.getRootAsDateMetadata = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.DateMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.DateMetadata.startDateMetadata = function(builder) {
  builder.startObject(0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.DateMetadata.endDateMetadata = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.TimeMetadata = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.TimeMetadata}
 */
arrow.ipc.feather.fbs.TimeMetadata.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.TimeMetadata=} obj
 * @returns {arrow.ipc.feather.fbs.TimeMetadata}
 */
arrow.ipc.feather.fbs.TimeMetadata.getRootAsTimeMetadata = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.TimeMetadata).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {arrow.ipc.feather.fbs.TimeUnit}
 */
arrow.ipc.feather.fbs.TimeMetadata.prototype.unit = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {arrow.ipc.feather.fbs.TimeUnit} */ (this.bb.readInt8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TimeUnit.SECOND;
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.TimeMetadata.startTimeMetadata = function(builder) {
  builder.startObject(1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TimeUnit} unit
 */
arrow.ipc.feather.fbs.TimeMetadata.addUnit = function(builder, unit) {
  builder.addFieldInt8(0, unit, arrow.ipc.feather.fbs.TimeUnit.SECOND);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.TimeMetadata.endTimeMetadata = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.Column = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.Column}
 */
arrow.ipc.feather.fbs.Column.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.Column=} obj
 * @returns {arrow.ipc.feather.fbs.Column}
 */
arrow.ipc.feather.fbs.Column.getRootAsColumn = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.Column).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
arrow.ipc.feather.fbs.Column.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {arrow.ipc.feather.fbs.PrimitiveArray=} obj
 * @returns {arrow.ipc.feather.fbs.PrimitiveArray|null}
 */
arrow.ipc.feather.fbs.Column.prototype.values = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? (obj || new arrow.ipc.feather.fbs.PrimitiveArray).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;
};

/**
 * @returns {arrow.ipc.feather.fbs.TypeMetadata}
 */
arrow.ipc.feather.fbs.Column.prototype.metadataType = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? /** @type {arrow.ipc.feather.fbs.TypeMetadata} */ (this.bb.readUint8(this.bb_pos + offset)) : arrow.ipc.feather.fbs.TypeMetadata.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
arrow.ipc.feather.fbs.Column.prototype.metadata = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * This should (probably) be JSON
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
arrow.ipc.feather.fbs.Column.prototype.userMetadata = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.Column.startColumn = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
arrow.ipc.feather.fbs.Column.addName = function(builder, nameOffset) {
  builder.addFieldOffset(0, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} valuesOffset
 */
arrow.ipc.feather.fbs.Column.addValues = function(builder, valuesOffset) {
  builder.addFieldOffset(1, valuesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {arrow.ipc.feather.fbs.TypeMetadata} metadataType
 */
arrow.ipc.feather.fbs.Column.addMetadataType = function(builder, metadataType) {
  builder.addFieldInt8(2, metadataType, arrow.ipc.feather.fbs.TypeMetadata.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metadataOffset
 */
arrow.ipc.feather.fbs.Column.addMetadata = function(builder, metadataOffset) {
  builder.addFieldOffset(3, metadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} userMetadataOffset
 */
arrow.ipc.feather.fbs.Column.addUserMetadata = function(builder, userMetadataOffset) {
  builder.addFieldOffset(4, userMetadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.Column.endColumn = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
arrow.ipc.feather.fbs.CTable = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {arrow.ipc.feather.fbs.CTable}
 */
arrow.ipc.feather.fbs.CTable.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {arrow.ipc.feather.fbs.CTable=} obj
 * @returns {arrow.ipc.feather.fbs.CTable}
 */
arrow.ipc.feather.fbs.CTable.getRootAsCTable = function(bb, obj) {
  return (obj || new arrow.ipc.feather.fbs.CTable).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Some text (or a name) metadata about what the file is, optional
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
arrow.ipc.feather.fbs.CTable.prototype.description = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @returns {flatbuffers.Long}
 */
arrow.ipc.feather.fbs.CTable.prototype.numRows = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * @param {number} index
 * @param {arrow.ipc.feather.fbs.Column=} obj
 * @returns {arrow.ipc.feather.fbs.Column}
 */
arrow.ipc.feather.fbs.CTable.prototype.columns = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new arrow.ipc.feather.fbs.Column).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
arrow.ipc.feather.fbs.CTable.prototype.columnsLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Version number of the Feather format
 *
 * @returns {number}
 */
arrow.ipc.feather.fbs.CTable.prototype.version = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * Table metadata (likely JSON), not yet used
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
arrow.ipc.feather.fbs.CTable.prototype.metadata = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
arrow.ipc.feather.fbs.CTable.startCTable = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} descriptionOffset
 */
arrow.ipc.feather.fbs.CTable.addDescription = function(builder, descriptionOffset) {
  builder.addFieldOffset(0, descriptionOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} numRows
 */
arrow.ipc.feather.fbs.CTable.addNumRows = function(builder, numRows) {
  builder.addFieldInt64(1, numRows, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} columnsOffset
 */
arrow.ipc.feather.fbs.CTable.addColumns = function(builder, columnsOffset) {
  builder.addFieldOffset(2, columnsOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.CTable.createColumnsVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
arrow.ipc.feather.fbs.CTable.startColumnsVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} version
 */
arrow.ipc.feather.fbs.CTable.addVersion = function(builder, version) {
  builder.addFieldInt32(3, version, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} metadataOffset
 */
arrow.ipc.feather.fbs.CTable.addMetadata = function(builder, metadataOffset) {
  builder.addFieldOffset(4, metadataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
arrow.ipc.feather.fbs.CTable.endCTable = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
arrow.ipc.feather.fbs.CTable.finishCTableBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.arrow = arrow;
