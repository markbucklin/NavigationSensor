// automatically generated by the FlatBuffers compiler, do not modify

import { flatbuffers } from "./flatbuffers"
import * as NS4630436522709806798 from "./Schema_generated";
/**
 * Shape data for a single axis in a tensor
 *
 * @constructor
 */
export namespace org.apache.arrow.flatbuf{
export class TensorDim {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {TensorDim}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):TensorDim {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {TensorDim=} obj
 * @returns {TensorDim}
 */
static getRootAsTensorDim(bb:flatbuffers.ByteBuffer, obj?:TensorDim):TensorDim {
  return (obj || new TensorDim).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Length of dimension
 *
 * @returns {flatbuffers.Long}
 */
size():flatbuffers.Long {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? this.bb!.readInt64(this.bb_pos + offset) : this.bb!.createLong(0, 0);
};

/**
 * Name of the dimension, optional
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
name():string|null
name(optionalEncoding:flatbuffers.Encoding):string|Uint8Array|null
name(optionalEncoding?:any):string|Uint8Array|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startTensorDim(builder:flatbuffers.Builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} size
 */
static addSize(builder:flatbuffers.Builder, size:flatbuffers.Long) {
  builder.addFieldInt64(0, size, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
static addName(builder:flatbuffers.Builder, nameOffset:flatbuffers.Offset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endTensorDim(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

}
}
/**
 * @constructor
 */
export namespace org.apache.arrow.flatbuf{
export class Tensor {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  bb: flatbuffers.ByteBuffer|null = null;

  /**
   * @type {number}
   */
  bb_pos:number = 0;
/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {Tensor}
 */
__init(i:number, bb:flatbuffers.ByteBuffer):Tensor {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {Tensor=} obj
 * @returns {Tensor}
 */
static getRootAsTensor(bb:flatbuffers.ByteBuffer, obj?:Tensor):Tensor {
  return (obj || new Tensor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {org.apache.arrow.flatbuf.Type}
 */
typeType():NS4630436522709806798.org.apache.arrow.flatbuf.Type {
  var offset = this.bb!.__offset(this.bb_pos, 4);
  return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb!.readUint8(this.bb_pos + offset)) : NS4630436522709806798.org.apache.arrow.flatbuf.Type.NONE;
};

/**
 * The type of data contained in a value cell. Currently only fixed-width
 * value types are supported, no strings or nested types
 *
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
type<T extends flatbuffers.Table>(obj:T):T|null {
  var offset = this.bb!.__offset(this.bb_pos, 6);
  return offset ? this.bb!.__union(obj, this.bb_pos + offset) : null;
};

/**
 * The dimensions of the tensor, optionally named
 *
 * @param {number} index
 * @param {org.apache.arrow.flatbuf.TensorDim=} obj
 * @returns {org.apache.arrow.flatbuf.TensorDim}
 */
shape(index: number, obj?:org.apache.arrow.flatbuf.TensorDim):org.apache.arrow.flatbuf.TensorDim|null {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? (obj || new org.apache.arrow.flatbuf.TensorDim).__init(this.bb!.__indirect(this.bb!.__vector(this.bb_pos + offset) + index * 4), this.bb!) : null;
};

/**
 * @returns {number}
 */
shapeLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 8);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Non-negative byte offsets to advance one value cell along each dimension
 *
 * @param {number} index
 * @returns {flatbuffers.Long}
 */
strides(index: number):flatbuffers.Long|null {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.readInt64(this.bb!.__vector(this.bb_pos + offset) + index * 8) : this.bb!.createLong(0, 0);
};

/**
 * @returns {number}
 */
stridesLength():number {
  var offset = this.bb!.__offset(this.bb_pos, 10);
  return offset ? this.bb!.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The location and size of the tensor's data
 *
 * @param {org.apache.arrow.flatbuf.Buffer=} obj
 * @returns {org.apache.arrow.flatbuf.Buffer|null}
 */
data(obj?:NS4630436522709806798.org.apache.arrow.flatbuf.Buffer):NS4630436522709806798.org.apache.arrow.flatbuf.Buffer|null {
  var offset = this.bb!.__offset(this.bb_pos, 12);
  return offset ? (obj || new NS4630436522709806798.org.apache.arrow.flatbuf.Buffer).__init(this.bb_pos + offset, this.bb!) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
static startTensor(builder:flatbuffers.Builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {org.apache.arrow.flatbuf.Type} typeType
 */
static addTypeType(builder:flatbuffers.Builder, typeType:NS4630436522709806798.org.apache.arrow.flatbuf.Type) {
  builder.addFieldInt8(0, typeType, NS4630436522709806798.org.apache.arrow.flatbuf.Type.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typeOffset
 */
static addType(builder:flatbuffers.Builder, typeOffset:NS4630436522709806798.flatbuffers.Offset) {
  builder.addFieldOffset(1, typeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shapeOffset
 */
static addShape(builder:flatbuffers.Builder, shapeOffset:flatbuffers.Offset) {
  builder.addFieldOffset(2, shapeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
static createShapeVector(builder:flatbuffers.Builder, data:flatbuffers.Offset[]):flatbuffers.Offset {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
static startShapeVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stridesOffset
 */
static addStrides(builder:flatbuffers.Builder, stridesOffset:flatbuffers.Offset) {
  builder.addFieldOffset(3, stridesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Long>} data
 * @returns {flatbuffers.Offset}
 */
static createStridesVector(builder:flatbuffers.Builder, data:flatbuffers.Long[]):flatbuffers.Offset {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
static startStridesVector(builder:flatbuffers.Builder, numElems:number) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
static addData(builder:flatbuffers.Builder, dataOffset:flatbuffers.Offset) {
  builder.addFieldStruct(4, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
static endTensor(builder:flatbuffers.Builder):flatbuffers.Offset {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
static finishTensorBuffer(builder:flatbuffers.Builder, offset:flatbuffers.Offset) {
  builder.finish(offset);
};

}
}
