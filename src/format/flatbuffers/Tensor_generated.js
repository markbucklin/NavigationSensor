// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var org = org || {};

/**
 * @const
 * @namespace
 */
org.apache = org.apache || {};

/**
 * @const
 * @namespace
 */
org.apache.arrow = org.apache.arrow || {};

/**
 * @const
 * @namespace
 */
org.apache.arrow.flatbuf = org.apache.arrow.flatbuf || {};

/**
 * Shape data for a single axis in a tensor
 *
 * @constructor
 */
org.apache.arrow.flatbuf.TensorDim = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.apache.arrow.flatbuf.TensorDim}
 */
org.apache.arrow.flatbuf.TensorDim.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.apache.arrow.flatbuf.TensorDim=} obj
 * @returns {org.apache.arrow.flatbuf.TensorDim}
 */
org.apache.arrow.flatbuf.TensorDim.getRootAsTensorDim = function(bb, obj) {
  return (obj || new org.apache.arrow.flatbuf.TensorDim).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * Length of dimension
 *
 * @returns {flatbuffers.Long}
 */
org.apache.arrow.flatbuf.TensorDim.prototype.size = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);
};

/**
 * Name of the dimension, optional
 *
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
org.apache.arrow.flatbuf.TensorDim.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.apache.arrow.flatbuf.TensorDim.startTensorDim = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Long} size
 */
org.apache.arrow.flatbuf.TensorDim.addSize = function(builder, size) {
  builder.addFieldInt64(0, size, builder.createLong(0, 0));
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
org.apache.arrow.flatbuf.TensorDim.addName = function(builder, nameOffset) {
  builder.addFieldOffset(1, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.apache.arrow.flatbuf.TensorDim.endTensorDim = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @constructor
 */
org.apache.arrow.flatbuf.Tensor = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {org.apache.arrow.flatbuf.Tensor}
 */
org.apache.arrow.flatbuf.Tensor.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {org.apache.arrow.flatbuf.Tensor=} obj
 * @returns {org.apache.arrow.flatbuf.Tensor}
 */
org.apache.arrow.flatbuf.Tensor.getRootAsTensor = function(bb, obj) {
  return (obj || new org.apache.arrow.flatbuf.Tensor).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {org.apache.arrow.flatbuf.Type}
 */
org.apache.arrow.flatbuf.Tensor.prototype.typeType = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;
};

/**
 * The type of data contained in a value cell. Currently only fixed-width
 * value types are supported, no strings or nested types
 *
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
org.apache.arrow.flatbuf.Tensor.prototype.type = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * The dimensions of the tensor, optionally named
 *
 * @param {number} index
 * @param {org.apache.arrow.flatbuf.TensorDim=} obj
 * @returns {org.apache.arrow.flatbuf.TensorDim}
 */
org.apache.arrow.flatbuf.Tensor.prototype.shape = function(index, obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new org.apache.arrow.flatbuf.TensorDim).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;
};

/**
 * @returns {number}
 */
org.apache.arrow.flatbuf.Tensor.prototype.shapeLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * Non-negative byte offsets to advance one value cell along each dimension
 *
 * @param {number} index
 * @returns {flatbuffers.Long}
 */
org.apache.arrow.flatbuf.Tensor.prototype.strides = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt64(this.bb.__vector(this.bb_pos + offset) + index * 8) : this.bb.createLong(0, 0);
};

/**
 * @returns {number}
 */
org.apache.arrow.flatbuf.Tensor.prototype.stridesLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * The location and size of the tensor's data
 *
 * @param {org.apache.arrow.flatbuf.Buffer=} obj
 * @returns {org.apache.arrow.flatbuf.Buffer|null}
 */
org.apache.arrow.flatbuf.Tensor.prototype.data = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? (obj || new org.apache.arrow.flatbuf.Buffer).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
org.apache.arrow.flatbuf.Tensor.startTensor = function(builder) {
  builder.startObject(5);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {org.apache.arrow.flatbuf.Type} typeType
 */
org.apache.arrow.flatbuf.Tensor.addTypeType = function(builder, typeType) {
  builder.addFieldInt8(0, typeType, org.apache.arrow.flatbuf.Type.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} typeOffset
 */
org.apache.arrow.flatbuf.Tensor.addType = function(builder, typeOffset) {
  builder.addFieldOffset(1, typeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} shapeOffset
 */
org.apache.arrow.flatbuf.Tensor.addShape = function(builder, shapeOffset) {
  builder.addFieldOffset(2, shapeOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Offset>} data
 * @returns {flatbuffers.Offset}
 */
org.apache.arrow.flatbuf.Tensor.createShapeVector = function(builder, data) {
  builder.startVector(4, data.length, 4);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addOffset(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
org.apache.arrow.flatbuf.Tensor.startShapeVector = function(builder, numElems) {
  builder.startVector(4, numElems, 4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} stridesOffset
 */
org.apache.arrow.flatbuf.Tensor.addStrides = function(builder, stridesOffset) {
  builder.addFieldOffset(3, stridesOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<flatbuffers.Long>} data
 * @returns {flatbuffers.Offset}
 */
org.apache.arrow.flatbuf.Tensor.createStridesVector = function(builder, data) {
  builder.startVector(8, data.length, 8);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt64(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
org.apache.arrow.flatbuf.Tensor.startStridesVector = function(builder, numElems) {
  builder.startVector(8, numElems, 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} dataOffset
 */
org.apache.arrow.flatbuf.Tensor.addData = function(builder, dataOffset) {
  builder.addFieldStruct(4, dataOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
org.apache.arrow.flatbuf.Tensor.endTensor = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
org.apache.arrow.flatbuf.Tensor.finishTensorBuffer = function(builder, offset) {
  builder.finish(offset);
};

// Exports for Node.js and RequireJS
this.org = org;
