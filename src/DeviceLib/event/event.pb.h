/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Sat Jan 13 07:52:52 2018. */

#ifndef PB_EVENT_PB_H_INCLUDED
#define PB_EVENT_PB_H_INCLUDED
#include <pb.h>

#include "generator/proto/nanopb.pb.h"

#include "google/protobuf/any.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _EventType {
    EventType_INFO = 1,
    EventType_COMMAND = 2,
    EventType_SETTING = 3,
    EventType_STATUS = 4,
    EventType_DATA = 5,
    EventType_ACTION = 6
} EventType;
#define _EventType_MIN EventType_INFO
#define _EventType_MAX EventType_ACTION
#define _EventType_ARRAYSIZE ((EventType)(EventType_ACTION+1))

typedef enum _DataType {
    DataType_NUMERIC = 0,
    DataType_STRING = 1,
    DataType_BYTES = 2,
    DataType_BOOLEAN = 3
} DataType;
#define _DataType_MIN DataType_NUMERIC
#define _DataType_MAX DataType_BOOLEAN
#define _DataType_ARRAYSIZE ((DataType)(DataType_BOOLEAN+1))

/* Struct definitions */
typedef struct _AnyData {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:AnyData) */
} AnyData;

typedef struct _EventRegister {
    pb_callback_t events;
/* @@protoc_insertion_point(struct:EventRegister) */
} EventRegister;

typedef struct _FieldRegister {
    pb_callback_t fields;
/* @@protoc_insertion_point(struct:FieldRegister) */
} FieldRegister;

typedef struct _Payload {
    pb_callback_t data;
/* @@protoc_insertion_point(struct:Payload) */
} Payload;

typedef struct _BooleanData {
    bool value;
/* @@protoc_insertion_point(struct:BooleanData) */
} BooleanData;

typedef PB_BYTES_ARRAY_T(16) BytesData_medium_bytes_t;
typedef PB_BYTES_ARRAY_T(32) BytesData_long_bytes_t;
typedef struct _BytesData {
    bool has_single_byte;
    pb_byte_t single_byte[1];
    bool has_double_byte;
    pb_byte_t double_byte[2];
    bool has_short_bytes;
    pb_byte_t short_bytes[8];
    bool has_medium_bytes;
    BytesData_medium_bytes_t medium_bytes;
    bool has_long_bytes;
    BytesData_long_bytes_t long_bytes;
/* @@protoc_insertion_point(struct:BytesData) */
} BytesData;

typedef struct _NumericData {
    pb_size_t which_num;
    union {
        int32_t signed_integer;
        uint32_t unsigned_integer;
        float float32;
        double float64;
    } num;
/* @@protoc_insertion_point(struct:NumericData) */
} NumericData;

typedef struct _PayloadInfo {
    bool has_count;
    uint32_t count;
    pb_callback_t data;
/* @@protoc_insertion_point(struct:PayloadInfo) */
} PayloadInfo;

typedef struct _StringData {
    bool has_short_string;
    char short_string[7];
    bool has_medium_string;
    char medium_string[15];
    bool has_long_string;
    char long_string[31];
/* @@protoc_insertion_point(struct:StringData) */
} StringData;

typedef struct _Timestamp {
    uint32_t sec;
    bool has_nsec;
    uint32_t nsec;
/* @@protoc_insertion_point(struct:Timestamp) */
} Timestamp;

typedef struct _UnitInfo {
    char abbreviation[4];
    bool has_name;
    char name[40];
/* @@protoc_insertion_point(struct:UnitInfo) */
} UnitInfo;

typedef struct _Data {
    pb_size_t which_data_type;
    union {
        NumericData numeric_data;
        StringData string_data;
        BytesData bytes_data;
        BooleanData boolean_data;
    } data_type;
/* @@protoc_insertion_point(struct:Data) */
} Data;

typedef struct _DataInfo {
    uint32_t id;
    DataType type;
    bool has_name;
    char name[40];
    bool has_unit;
    UnitInfo unit;
    bool has_min;
    NumericData min;
    bool has_max;
    NumericData max;
    bool has_resolution;
    NumericData resolution;
/* @@protoc_insertion_point(struct:DataInfo) */
} DataInfo;

typedef struct _Event {
    uint32_t id;
    bool has_timestamp;
    Timestamp timestamp;
    bool has_sequence;
    uint32_t sequence;
    bool has_payload;
    Payload payload;
/* @@protoc_insertion_point(struct:Event) */
} Event;

typedef struct _EventInfo {
    uint32_t id;
    char name[40];
    bool has_type;
    EventType type;
    pb_callback_t address;
    bool has_payload;
    PayloadInfo payload;
/* @@protoc_insertion_point(struct:EventInfo) */
} EventInfo;

typedef struct _EventStream {
    bool has_register;
    EventRegister register;
    bool has_start_time;
    Timestamp start_time;
    pb_callback_t events;
    bool has_event_count;
    uint32_t event_count;
    bool has_stop_time;
    Timestamp stop_time;
    bool has_name;
    char name[40];
/* @@protoc_insertion_point(struct:EventStream) */
} EventStream;

/* Default values for struct fields */

/* Initializer values for message structs */
#define EventRegister_init_default               {{{NULL}, NULL}}
#define FieldRegister_init_default               {{{NULL}, NULL}}
#define AnyData_init_default                     {{{NULL}, NULL}}
#define EventInfo_init_default                   {0, "", false, (EventType)0, {{NULL}, NULL}, false, PayloadInfo_init_default}
#define PayloadInfo_init_default                 {false, 0, {{NULL}, NULL}}
#define DataInfo_init_default                    {0, (DataType)0, false, "", false, UnitInfo_init_default, false, NumericData_init_default, false, NumericData_init_default, false, NumericData_init_default}
#define UnitInfo_init_default                    {"", false, ""}
#define NumericData_init_default                 {0, {0}}
#define StringData_init_default                  {false, "", false, "", false, ""}
#define BytesData_init_default                   {false, {0}, false, {0}, false, {0}, false, {0, {0}}, false, {0, {0}}}
#define BooleanData_init_default                 {0}
#define EventStream_init_default                 {false, EventRegister_init_default, false, Timestamp_init_default, {{NULL}, NULL}, false, 0, false, Timestamp_init_default, false, ""}
#define Event_init_default                       {0, false, Timestamp_init_default, false, 0, false, Payload_init_default}
#define Timestamp_init_default                   {0, false, 0}
#define Payload_init_default                     {{{NULL}, NULL}}
#define Data_init_default                        {0, {NumericData_init_default}}
#define EventRegister_init_zero                  {{{NULL}, NULL}}
#define FieldRegister_init_zero                  {{{NULL}, NULL}}
#define AnyData_init_zero                        {{{NULL}, NULL}}
#define EventInfo_init_zero                      {0, "", false, (EventType)0, {{NULL}, NULL}, false, PayloadInfo_init_zero}
#define PayloadInfo_init_zero                    {false, 0, {{NULL}, NULL}}
#define DataInfo_init_zero                       {0, (DataType)0, false, "", false, UnitInfo_init_zero, false, NumericData_init_zero, false, NumericData_init_zero, false, NumericData_init_zero}
#define UnitInfo_init_zero                       {"", false, ""}
#define NumericData_init_zero                    {0, {0}}
#define StringData_init_zero                     {false, "", false, "", false, ""}
#define BytesData_init_zero                      {false, {0}, false, {0}, false, {0}, false, {0, {0}}, false, {0, {0}}}
#define BooleanData_init_zero                    {0}
#define EventStream_init_zero                    {false, EventRegister_init_zero, false, Timestamp_init_zero, {{NULL}, NULL}, false, 0, false, Timestamp_init_zero, false, ""}
#define Event_init_zero                          {0, false, Timestamp_init_zero, false, 0, false, Payload_init_zero}
#define Timestamp_init_zero                      {0, false, 0}
#define Payload_init_zero                        {{{NULL}, NULL}}
#define Data_init_zero                           {0, {NumericData_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define AnyData_data_tag                         1
#define EventRegister_events_tag                 1
#define FieldRegister_fields_tag                 1
#define Payload_data_tag                         1
#define BooleanData_value_tag                    1
#define BytesData_single_byte_tag                1
#define BytesData_double_byte_tag                2
#define BytesData_short_bytes_tag                3
#define BytesData_medium_bytes_tag               4
#define BytesData_long_bytes_tag                 5
#define NumericData_signed_integer_tag           1
#define NumericData_unsigned_integer_tag         2
#define NumericData_float32_tag                  3
#define NumericData_float64_tag                  4
#define PayloadInfo_count_tag                    1
#define PayloadInfo_data_tag                     2
#define StringData_short_string_tag              1
#define StringData_medium_string_tag             2
#define StringData_long_string_tag               3
#define Timestamp_sec_tag                        1
#define Timestamp_nsec_tag                       2
#define UnitInfo_abbreviation_tag                1
#define UnitInfo_name_tag                        2
#define Data_numeric_data_tag                    1
#define Data_string_data_tag                     2
#define Data_bytes_data_tag                      3
#define Data_boolean_data_tag                    4
#define DataInfo_id_tag                          1
#define DataInfo_type_tag                        2
#define DataInfo_name_tag                        3
#define DataInfo_unit_tag                        11
#define DataInfo_min_tag                         12
#define DataInfo_max_tag                         13
#define DataInfo_resolution_tag                  14
#define Event_id_tag                             1
#define Event_timestamp_tag                      5
#define Event_sequence_tag                       6
#define Event_payload_tag                        7
#define EventInfo_id_tag                         1
#define EventInfo_name_tag                       2
#define EventInfo_type_tag                       3
#define EventInfo_address_tag                    4
#define EventInfo_payload_tag                    7
#define EventStream_register_tag                 2
#define EventStream_start_time_tag               3
#define EventStream_events_tag                   4
#define EventStream_event_count_tag              5
#define EventStream_stop_time_tag                6
#define EventStream_name_tag                     7

/* Struct field encoding specification for nanopb */
extern const pb_field_t EventRegister_fields[2];
extern const pb_field_t FieldRegister_fields[2];
extern const pb_field_t AnyData_fields[2];
extern const pb_field_t EventInfo_fields[6];
extern const pb_field_t PayloadInfo_fields[3];
extern const pb_field_t DataInfo_fields[8];
extern const pb_field_t UnitInfo_fields[3];
extern const pb_field_t NumericData_fields[5];
extern const pb_field_t StringData_fields[4];
extern const pb_field_t BytesData_fields[6];
extern const pb_field_t BooleanData_fields[2];
extern const pb_field_t EventStream_fields[7];
extern const pb_field_t Event_fields[5];
extern const pb_field_t Timestamp_fields[3];
extern const pb_field_t Payload_fields[2];
extern const pb_field_t Data_fields[5];

/* Maximum encoded size of messages (where known) */
/* EventRegister_size depends on runtime parameters */
/* FieldRegister_size depends on runtime parameters */
/* AnyData_size depends on runtime parameters */
/* EventInfo_size depends on runtime parameters */
/* PayloadInfo_size depends on runtime parameters */
#define DataInfo_size                            133
#define UnitInfo_size                            48
#define NumericData_size                         9
#define StringData_size                          59
#define BytesData_size                           69
#define BooleanData_size                         2
/* EventStream_size depends on runtime parameters */
#define Event_size                               (32 + Payload_size)
#define Timestamp_size                           12
/* Payload_size depends on runtime parameters */
#define Data_size                                71

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define EVENT_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
